name: terraform-infra-provisioning

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**/README.md'

permissions: read-all
#--------------------------
#
# PLEASE READ: Add a GitHub Actions variable 'INFRACOST_SCAN_TYPE' and set the value to either 'hcl_code' or 'tf_plan' depending on what type of Infracost scan desired.
#
#--------------------------
jobs:
  ecr_create:
    name: 'Create ECR Repo'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform_ecr
    outputs:
      ecr_exists: ${{ steps.check_ecr.outputs.exists }}
      repository_url: ${{ steps.apply.outputs.repository_url }}
      repository_name: ${{ steps.output.outputs.repository_name }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: AWSSession
        aws-region: us-east-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      # See https://github.com/infracost/actions/tree/master/setup for other inputs
      # If you can't use this action, see Docker images in https://infracost.io/cicd
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
      if: github.event_name == 'pull_request'

      # Checkout the base branch of the pull request (e.g. main/master).
    - name: Checkout base branch
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      uses: actions/checkout@v3
      with:
        ref: '${{ github.event.pull_request.base.ref }}'
      
    # Generate Infracost JSON file as the baseline.
    - name: Generate Infracost cost estimate baseline
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      run: |
        infracost breakdown --path=. \
                            --format=json \
                            --out-file=/tmp/infracost-base.json

    # Checkout the current PR branch so we can create a diff.
    - name: Checkout PR branch
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      uses: actions/checkout@v3

    # Generate an Infracost diff and save it to a JSON file.
    - name: Generate Infracost diff
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      run: |
        infracost diff --path=. \
                        --format=json \
                        --compare-to=/tmp/infracost-base.json \
                        --out-file=/tmp/infracost.json
  
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    # Checks that all Terraform configuration files are correctly written
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'
      run: |
        terraform plan -no-color -input=false \
        -lock-timeout=180s \
        -out=TFplan.JSON
      continue-on-error: true

    # Generate an Infracost diff and save it to a JSON file.
    - name: Generate Infracost diff
      if:  ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'tf_plan') }}
      run: |
        infracost diff --path=TFplan.JSON \
                        --format=json \
                        --out-file=/tmp/infracost.json

    - name: Post Infracost estimate
      if: github.event_name == 'pull_request'
      run: |
          infracost comment github --path=/tmp/infracost.json \
                                    --repo=$GITHUB_REPOSITORY \
                                    --github-token=${{github.token}} \
                                    --pull-request=${{github.event.pull_request.number}} \
                                    --show-skipped \
                                    --behavior=update

    - name: Post Terraform Plan output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve -input=false \
        -lock-timeout=180s
    - name: Terraform Output
      id: output
      run: |
        REPO_URL=$(terraform output -raw repository_url)
        REPO_NAME=$(terraform output -raw repository_name)

        echo "repository_url=$REPO_URL" >> $GITHUB_OUTPUT
        echo "repository_name=$REPO_NAME" >> $GITHUB_OUTPUT
      continue-on-error: true
    - name: Check if ECR exists
      id: check_ecr
      run: |
        # Extract just the repository name from the complex output
        REPO_NAME=$(echo "${{ steps.output.outputs.repository_name }}")              
        echo "Extracted repository name: $REPO_NAME"

        if [ -z "$REPO_NAME" ]; then
          echo "Error: Repository name is empty"
          echo "exists=false" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        if aws ecr describe-repositories --repository-names "$REPO_NAME" 2>/dev/null; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

  docker_build_push:
    name: Build and Push Docker Image
    needs: ecr_create
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      security-events: write 
    if: needs.ecr_create.outputs.ecr_exists == 'true'
    defaults:
      run:
        shell: bash
        working-directory: ./lambda_src
    env:
      ECR_REPOSITORY: ${{ needs.ecr_create.outputs.repository_name }}
      AWS_REGION: us-east-1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Image Tag
        id: tag
        run: |
          TAG_NAME=$(date +'%Y%m%d').${{ github.run_number }}.${{ github.run_attempt }}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "image_tag=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Print Image Tag
        run: echo "Tag Name for the Image ${{ env.TAG_NAME }}"
      # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: AWSSession
          aws-region: ${{ env.AWS_REGION }}
      # https://github.com/marketplace/actions/amazon-ecr-login-action-for-github-actions
      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: 'true'
      - name: Build and tag docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.TAG_NAME }}
        run: docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.TAG_NAME }}
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_NAME }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      # Push the Docker image to Amazon ECR, but only if the even is not a pull request.
      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.TAG_NAME }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "pushed=true" >> $GITHUB_OUTPUT
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      - name: Create output file
        id: create-output
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.TAG_NAME }}
        run: |
          echo "REPO_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_PUSHED=${{ steps.push-image.outputs.pushed || 'false' }}" >> $GITHUB_OUTPUT
        continue-on-error: true
      
    outputs:
      repo_uri: ${{ steps.create-output.outputs.REPO_URI }}
      image_tag: ${{ steps.create-output.outputs.IMAGE_TAG }}
      image_pushed: ${{ steps.create-output.outputs.IMAGE_PUSHED }}

  deploy_lambda:
    name: 'Deploy Lambda'
    needs: docker_build_push
    env:
      DOCKER_IMAGE_URI: ${{ needs.docker_build_push.outputs.repo_uri }}
      DOCKER_IMAGE_TAG: ${{ needs.docker_build_push.outputs.image_tag }}
      NEW_IMAGE_PUSHED: ${{ needs.docker_build_push.outputs.image_pushed }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform_lambda
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Print Docker Image Details
      run: |
        echo "Docker Image URI: ${{ env.DOCKER_IMAGE_URI }}"
        echo "Docker Image Tag: ${{ env.DOCKER_IMAGE_TAG }}"
        echo "Docker Image State: ${{ env.NEW_IMAGE_PUSHED }}"
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: AWSSession
        aws-region: us-east-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      # See https://github.com/infracost/actions/tree/master/setup for other inputs
      # If you can't use this action, see Docker images in https://infracost.io/cicd
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
      if: github.event_name == 'pull_request'

      # Checkout the base branch of the pull request (e.g. main/master).
    - name: Checkout base branch
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      uses: actions/checkout@v3
      with:
        ref: '${{ github.event.pull_request.base.ref }}'
      
    # Generate Infracost JSON file as the baseline.
    - name: Generate Infracost cost estimate baseline
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      run: |
        infracost breakdown --path=. \
                            --format=json \
                            --out-file=/tmp/infracost-base.json

    # Checkout the current PR branch so we can create a diff.
    - name: Checkout PR branch
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      uses: actions/checkout@v3

    # Generate an Infracost diff and save it to a JSON file.
    - name: Generate Infracost diff
      if: ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'hcl_code') }}
      run: |
        infracost diff --path=. \
                        --format=json \
                        --compare-to=/tmp/infracost-base.json \
                        --out-file=/tmp/infracost.json
  
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    # Checks that all Terraform configuration files are correctly written
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'
      run: |
        terraform plan -no-color -input=false \
        -var="image_uri=${{ env.DOCKER_IMAGE_URI }}" \
        -lock-timeout=180s \
        -out=TFplan.JSON
      continue-on-error: true

    # Generate an Infracost diff and save it to a JSON file.
    - name: Generate Infracost diff
      if:  ${{ (github.event_name == 'pull_request') && (vars.INFRACOST_SCAN_TYPE  == 'tf_plan') }}
      run: |
        infracost diff --path=TFplan.JSON \
                        --format=json \
                        --out-file=/tmp/infracost.json

    - name: Post Infracost estimate
      if: github.event_name == 'pull_request'
      run: |
          infracost comment github --path=/tmp/infracost.json \
                                    --repo=$GITHUB_REPOSITORY \
                                    --github-token=${{github.token}} \
                                    --pull-request=${{github.event.pull_request.number}} \
                                    --show-skipped \
                                    --behavior=update

    - name: Post Terraform Plan output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve -input=false \
        -lock-timeout=180s \
        -var="image_uri=${{ env.DOCKER_IMAGE_URI }}"
